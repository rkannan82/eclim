feature_sdt = 'org.scala-ide.sdt.feature'

target(name: 'org.eclim.sdt.classpath'){
  fileset(dir: '${eclipse}'){
    include(name: 'dropins/**/plugins/org.scala-ide.*.jar')
    include(name: 'dropins/**/plugins/org.scala-lang.*.jar')
    include(name: 'dropins/**/plugins/org.scala-refactoring.*.jar')
    include(name: 'plugins/org.scala-ide.*.jar')
    include(name: 'plugins/org.scala-lang.*.jar')
    include(name: 'plugins/org.scala-refactoring.*.jar')
  }
}

target(name: 'org.eclim.sdt.plugin.compile'){
  taskdef(resource: 'scala/tools/ant/antlib.xml'){
    classpath(refid: 'classpath')
  }

  mkdir(dir: '${build.classes}/org.eclim.sdt')
  scalac(
      srcdir: 'org.eclim.sdt/scala',
      destdir: '${build.classes}/org.eclim.sdt',
      classpathref: 'classpath',
      deprecation: true)
  {
    include(name: '**/*.scala')
    classpath{fileset(dir: '${build.classes}/org.eclim.sdt', includes: 'org.eclim/**')}
    classpath{
      pathelement(path: '${build.classes}/org.eclim.sdt')
      fileset(dir: '${build.plugins}', includes: 'org.eclim*/eclim*.jar')
    }
  }
  copy(todir: '${build.classes}/org.eclim.sdt'){
    fileset(dir: "org.eclim.sdt/scala", includes: "eclim/**", excludes: '**/*.scala')
  }
}

target(name: 'org.eclim.sdt.test'){
  depends('test.init')
  runTests('org.eclim.sdt'){
    createProject('org.eclim.sdt', 'eclim_unit_test_scala')
  }
}

target(name: 'org.eclim.sdt.plugin.dist'){
  eclipseHome = binding.getVariable('eclipse')
  sdtVersions = binding.getVariable('sdt.versions').split(',') as Set

  // determine which version we've already built from our default eclipse home
  for (sdtVersion in sdtVersions) {
    try{
      sdtHome = binding.getVariable("sdt.${sdtVersion}.home")
    }catch(MissingPropertyException mpe){
      fail("Missing property: sdt.${sdtVersion}.home")
    }
    if (sdtHome == eclipseHome){
      echo("Using built org.eclim.sdt for scala: ${sdtVersion}")
      updatePluginSdtVersion(sdtVersion)
      sdtVersions.remove(sdtVersion)
      break
    }
  }

  // now build the versions we haven't already built
  for (sdtVersion in sdtVersions) {
    try{
      sdtHome = binding.getVariable("sdt.${sdtVersion}.home")
    }catch(MissingPropertyException mpe){
      fail("Missing property: sdt.${sdtVersion}.home")
    }

    // if the sdt home matches our eclipse home, then we've already built this
    // version so just use the jar that is already there
    if (sdtHome == eclipseHome){
      continue
    }

    echo("Building org.eclim.sdt for scala: ${sdtVersion}")
    delete(dir: 'build/temp/lib/scala')
    delete(dir: '${build.classes}/org.eclim.sdt')
    // NOTE: using ant(inheritAll: false) was still carrying over some
    // classpath remnants
    exec(executable: '${ant.home}/bin/ant', dir: '${basedir}', failonerror: true){
      arg(value: "-Declipse.home=${sdtHome}")
      arg(value: '-Dplugin.name=org.eclim.sdt')
      arg(value: 'build.eclipse.plugin')
    }
    updatePluginSdtVersion(sdtVersion)
  }

  // delete these so that a subsiquent regular build doesn't end up using jars
  // from the per sdt version dist build.
  delete(dir: 'build/temp/lib/scala')
  delete(dir: '${build.classes}/org.eclim.sdt')
  // shouldn't delete anything
  delete(dir: '${build.plugins}/org.eclim.sdt_${eclim.version}', quiet: true)
}

def updatePluginSdtVersion(sdtVersion){
  ant.move(
    file: '${build.plugins}/org.eclim.sdt_${eclim.version}/eclim.sdt.jar',
    tofile: "\${build.plugins}/org.eclim.sdt_\${eclim.version}/eclim.sdt${sdtVersion}.jar")
  ant.replace(
    file: '${build.plugins}/org.eclim.sdt_${eclim.version}/META-INF/MANIFEST.MF',
    token: 'eclim.sdt',
    value: "eclim.sdt${sdtVersion}")
  ant.move(todir: "\${build.plugins}/org.eclim.sdt${sdtVersion}_\${eclim.version}"){
    ant.fileset(dir: '${build.plugins}/org.eclim.sdt_${eclim.version}')
  }
}
